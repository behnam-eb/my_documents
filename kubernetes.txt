---- Install Minikube ----------------------------------------------------
$ curl -LO https://storage.googleapis.com/minikube/releases/latest/minikube-latest.x86_64.rpm
$ sudo rpm -ivh minikube-latest.x86_64.rpm
$ wget https://storage.googleapis.com/minikube/releases/latest/docker-machine-driver-kvm2
$ chmod 755 docker-machine-driver-kvm2
$ mv docker-machine-driver-kvm2 /usr/local/bin/
--- KVM Hypervisor installing ---
$ yum -y install epel-release
$ yum -y install libvirt qemu-kvm virt-install virt-top libguestfs-tools bridge-utils
$ systemctl start libvirtd
$ sudo systemctl enable libvirtd
--------------------------------
$ sudo yum install -y yum-utils
$ sudo yum-config-manager     --add-repo     https://download.docker.com/linux/centos/docker-ce.repo
$ sudo yum install docker-ce docker-ce-cli containerd.io
--------------------------------
$ firewall-cmd --zone=public --add-masquerade --permanent
$ firewall-cmd --reload
$ vi /etc/sysctl.config-manager	
	net.bridge.bridge-nf-call-iptables = 1
$ sudo sysctl -p
$ yum install conntrack
$ minikube start --driver=none
$ minikube status
--------------------------------
---- Install kubectl -----------------------------------------------------
$ cat <<EOF > /etc/yum.repos.d/kubernetes.repo
	[kubernetes]
	name=Kubernetes
	baseurl=https://packages.cloud.google.com/yum/repos/kubernetes-el7-x86_64
	enabled=1
	gpgcheck=1
	repo_gpgcheck=1
	gpgkey=https://packages.cloud.google.com/yum/doc/yum-key.gpg https://packages.cloud.google.com/yum/doc/rpm-package-key.gpg
	EOF
$ yum install -y kubectl
--------------------------------------------------------------------------
$ ps -e | grep kube
$ ps -e | grep etcd
--------------------------------------------------------------------------
Dashboard:
$ kubectl apply -f https://raw.githubusercontent.com/kubernetes/dashboard/v2.0.0/aio/deploy/recommended.yaml
--------------------------------------------------------------------------
$ minikube addons enable metrics-server => it takes about 5 minutes to enable this
$ watch kubectl top [pod] [--container] => to see cpu and memory using
--------------------------------------------------------------------------
$ kubectl api-resources => show all resources in the cluster
$ kubectl explain [type] => documentation about desired type
$ kubectl explain node
$ kubectl explain node.spec
-------------------------
$ kubectl run NAME --image=image [--env="key=value"] [--port=port] [--dry-run=server|client] [--overrides=inline-json] [--command] -- [COMMAND] [args...]
$ kubectl create cronjob [NAME] --image=image --schedule='0/5 * * * ?' -- [COMMAND] [args...]
$ kubectl create cronjob my-job --image=busybox --schedule="*/1 * * * *"
$ kubectl [create|apply|update] -f [name].yaml
$ kubectl [create|delete] [pod|service|configmap|namespace] [[name] -f [file]]
$ kubectl get [all|node|pods|replicaset|deployment|service|endpoints|secrets|namespaces|cronjobs] ((-o yaml/json/wide))
$ kubectl get pods --all-namespaces(or -A)
$ kubectl get [pods|...] --selector [app=rng] => to limit the results
$ kubectl -n kube-public get configmap cluster-info -o yaml => -n = specify the namespace
$ kubectl describe [node|pod|replicaset|deployment|service|configmap] [name]
$ kubectl scale replicationcontroller --replicas=4 [name-of-service]
$ kubectl scale deployment [pingpong] --replicas 3
$ kubectl exec -it [.......] -- /bin/bash
$ kubectl exec -it [database] -- mysql -u root -p
$ kubectl exec -it [pod-name] -c [container-name] -- /bin/bash
$ kubectl logs (--tail 1) (--follow) [..........]
$ kubectl logs deployment pingpong
$ kubectl logs -l run=pingpong --tail 1 -f => -l show all resources with the following label (run=pingpong) , -f=--follow
$ kubectl expose deployment [my-deployment] --port [8888] => vreating a ClusterIP service
$ kubectl edit [deployment|...] [name] => to edit an object on the fly => opens the default editor of OS to edit
$ kubectl cluster-info dump => information about cluster for debuging
--------------------------------------------------------------------------
$ etcdctl ls /regitry
$ etcdctl get /registry/ranges/servicenodeports