--------------------------------------------------------------------------
[system-config-firewall]                    [D-BUS]           [firewall-config]           [firewall-cmd]
          |                                    |                       |                            |
     [iptables(service)]                       |------------->[firewalld(daemon and service)]<------|     
          |                                                                |
          |---------------------------->[iptables(command)]<---------------|
                                                |
                                                |
                                        [kernel(netfilterd)]
--------------------------------------------------------------------------
The iptables firewall uses tables to organize its rules. These tables classify rules according to the type of decisions they are used to make.
For instance, if a rule deals with network address translation, it will be put into the nat table. If the rule is used to decide whether to 
allow the packet to continue to its destination, it would probably be added to the filter table.

There are five netfilter hooks that programs can register with. As packets progress through the stack, they will trigger the kernel modules that
have registered with these hooks. The hooks that a packet will trigger depends on whether the packet is incoming or outgoing, the packet’s 
destination, and whether the packet was dropped or rejected at a previous point.

The following hooks represent various well-defined points in the networking stack:
NF_IP_PRE_ROUTING ========> This hook will be triggered by any incoming traffic very soon after entering the network stack. This hook is processed before 
                             any routing decisions have been made regarding where to send the packet.
NF_IP_LOCAL_IN ===========> This hook is triggered after an incoming packet has been routed if the packet is destined for the local system.
NF_IP_FORWARD ============> This hook is triggered after an incoming packet has been routed if the packet is to be forwarded to another host.
NF_IP_LOCAL_OUT ==========> This hook is triggered by any locally created outbound traffic as soon it hits the network stack.
NF_IP_POST_ROUTING =======> This hook is triggered by any outgoing or forwarded traffic after routing has taken place and just before being put out on the wire.


Within each iptables table, rules are further organized within separate “chains”. While tables are defined by the general aim of the rules they
hold, the built-in chains represent the netfilter hooks which trigger them. Chains basically determine when rules will be evaluated.
As you can see, the names of the built-in chains mirror the names of the netfilter hooks they are associated with:

PREROUTING ===========> Triggered by the NF_IP_PRE_ROUTING hook.
INPUT ================> Triggered by the NF_IP_LOCAL_IN hook.
FORWARD ==============> Triggered by the NF_IP_FORWARD hook.
OUTPUT ===============> Triggered by the NF_IP_LOCAL_OUT hook.
POSTROUTING ==========> Triggered by the NF_IP_POST_ROUTING hook.
--------------------------------------------------------------------------
**The Filter Table:
The filter table is one of the most widely used tables in iptables. The filter table is used to make decisions about whether to let a packet continue to 
its intended destination or to deny its request. In firewall parlance, this is known as “filtering” packets. This table provides the bulk of functionality 
that people think of when discussing firewalls.

**The NAT Table:
The nat table is used to implement network address translation rules. As packets enter the network stack, rules in this table will determine whether and
how to modify the packet’s source or destination addresses in order to impact the way that the packet and any response traffic are routed. This is often 
used to route packets to networks when direct access is not possible.

**The Mangle Table:
The mangle table is used to alter the IP headers of the packet in various ways. For instance, you can adjust the TTL (Time to Live) value of a packet, either
lengthening or shortening the number of valid network hops the packet can sustain. Other IP headers can be altered in similar ways.

This table can also place an internal kernel “mark” on the packet for further processing in other tables and by other networking tools. This mark does not 
touch the actual packet, but adds the mark to the kernel’s representation of the packet.
--------------------------------------------------------------------------
Assuming that the server knows how to route a packet and that the firewall rules permit its transmission, the following flows represent the paths that will
be traversed in different situations:

Incoming packets destined for the local system:    PREROUTING -> INPUT
Incoming packets destined to another host:         PREROUTING -> FORWARD -> POSTROUTING
Locally generated packets:                         OUTPUT -> POSTROUTING
--------------------------------------------------------------------------
Available States:
Connections tracked by the connection tracking system will be in one of the following states:

NEW:      When a packet arrives that is not associated with an existing connection, but is not invalid as a first packet, a new connection will be added to 
          the system with this label. This happens for both connection-aware protocols like TCP and for connectionless protocols like UDP.
          
ESTABLISHED: A connection is changed from NEW to ESTABLISHED when it receives a valid response in the opposite direction. For TCP connections, this means
              a SYN/ACK and for UDP and ICMP traffic, this means a response where source and destination of the original packet are switched.
              
RELATED:   Packets that are not part of an existing connection, but are associated with a connection already in the system are labeled RELATED. This could 
           mean a helper connection, as is the case with FTP data transmission connections, or it could be ICMP responses to connection attempts by other protocols.
           
INVALID:   Packets can be marked INVALID if they are not associated with an existing connection and aren’t appropriate for opening a new connection, if 
           they cannot be identified, or if they aren’t routable among other reasons.
           
UNTRACKED: Packets can be marked as UNTRACKED if they’ve been targeted in a raw table chain to bypass tracking.

SNAT:      A virtual state set when the source address has been altered by NAT operations. This is used by the connection tracking system so that it knows
           to change the source addresses back in reply packets.
           
DNAT:      A virtual state set when the destination address has been altered by NAT operations. This is used by the connection tracking system so that 
           it knows to change the destination address back when routing reply packets.
--------------------------------------------------------------------------
